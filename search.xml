<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ Study</title>
    <url>/Blog/2024/02/14/C++%20Study/</url>
    <content><![CDATA[<h1 id="1-C-基础"><a href="#1-C-基础" class="headerlink" title="1.C++基础"></a>1.C++基础</h1><h2 id="1-1-C-运行原理"><a href="#1-1-C-运行原理" class="headerlink" title="1.1.C++运行原理"></a>1.1.C++运行原理</h2><ul>
<li>C++如何工作<br>编译器先处理预处理，即在编译前处理；<br>所有cpp文件被编译后，生成.obj文件，linker将这些文件整合成一个二进制可执行文件，也就是.exe 文件</li>
<li>C++编译器如何工作<br>预处理的处理-&gt;生成语法树<br>预处理，实际上就是将预处理的文件全数复制粘贴到当前文件<br>对于编译器来说，文件没有任何意义，只需要告知是什么文件即可</li>
<li>C++链接器如何工作<br>需要一个入口，一般是main函数，但也可以是其他函数<br>链接器会链接可能需要使用到的函数，所以如果函数仅仅在自己的文件里可能被使用到，并且在本文件不会被使用到，那么在最前面加上static就可以使它不被链接。static使其成为内部函数</li>
</ul>
<h2 id="1-2-C-变量、函数"><a href="#1-2-C-变量、函数" class="headerlink" title="1.2.C++变量、函数"></a>1.2.C++变量、函数</h2><ul>
<li>变量<br>int,string,long,long long,bool</li>
<li>函数的创建原则：避免过多重复代码</li>
<li>sizeof(),可以查看变量的大小</li>
</ul>
<h2 id="1-3-头文件"><a href="#1-3-头文件" class="headerlink" title="1.3.头文件"></a>1.3.头文件</h2><ul>
<li>头文件通过#include进行复制</li>
<li>#pragma once确保头文件仅被复制一次</li>
<li>“”用于文件路径，&lt;&gt;用于文件夹路径</li>
</ul>
<h2 id="1-4-条件、分支和循环"><a href="#1-4-条件、分支和循环" class="headerlink" title="1.4.条件、分支和循环"></a>1.4.条件、分支和循环</h2><h3 id="1-4-1-条件语句"><a href="#1-4-1-条件语句" class="headerlink" title="1.4.1.条件语句"></a>1.4.1.条件语句</h3><ul>
<li>本质上是给CPU不同的指令（机器代码），在不同的内存进行运作</li>
</ul>
<h3 id="1-4-2-循环语句"><a href="#1-4-2-循环语句" class="headerlink" title="1.4.2.循环语句"></a>1.4.2.循环语句</h3><ul>
<li>for循环</li>
<li>while循环</li>
<li>do while循环</li>
</ul>
<h3 id="1-4-3-控制流语句"><a href="#1-4-3-控制流语句" class="headerlink" title="1.4.3.控制流语句"></a>1.4.3.控制流语句</h3><ul>
<li>continue,进行下一次循环</li>
<li>break，跳出循环，终止循环</li>
<li>return，完全退出函数，并且返回</li>
</ul>
<h2 id="1-5-指针和引用"><a href="#1-5-指针和引用" class="headerlink" title="1.5.指针和引用"></a>1.5.指针和引用</h2><h3 id="1-5-1-指针"><a href="#1-5-1-指针" class="headerlink" title="1.5.1.指针"></a>1.5.1.指针</h3><ul>
<li>指针用于管理和操纵内存，指针是一种存储内存地址的整数</li>
<li>指针的类型是告诉计算机，对应地址的值是什么类型，对于地址本身没有影响，地址始终是整数</li>
<li>指针可以指向指针，例如：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> var = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* ptn = &amp;var; <span class="comment">//&amp;取了var地址</span></span><br><span class="line"><span class="type">int</span>** ptnd = &amp;ptn;</span><br></pre></td></tr></table></figure></div></li>
<li>指针的指向对象可以修改<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* ref = &amp;a;</span><br><span class="line">*ref = <span class="number">1</span>; <span class="comment">//逆向指针，即取地址的值并且修改</span></span><br><span class="line">ref = &amp;b;</span><br><span class="line">*ref = <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; b &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-5-2-引用"><a href="#1-5-2-引用" class="headerlink" title="1.5.2.引用"></a>1.5.2.引用</h3><ul>
<li>引用只是引用现有的变量，并没有在内存中占用资源，仅仅出现在源代码中。相当于给已有变量取别名<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> var = <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span>&amp; ref = var;</span><br><span class="line">ref = <span class="number">9</span>; <span class="comment">//通过引用改变了var的实际值</span></span><br></pre></td></tr></table></figure></div></li>
<li>函数引用举例：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> var = <span class="number">9</span>;</span><br><span class="line">	<span class="built_in">Add</span>(var);</span><br><span class="line">	std::cout &lt;&lt; var &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>引用之后不能修改引用的对象</li>
</ul>
<h2 id="1-6-C-类"><a href="#1-6-C-类" class="headerlink" title="1.6.C++类"></a>1.6.C++类</h2><h3 id="1-6-1-C-类"><a href="#1-6-1-C-类" class="headerlink" title="1.6.1.C++类"></a>1.6.1.C++类</h3><ul>
<li>类的创建<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;; <span class="comment">//注意这里需要一个分号</span></span><br></pre></td></tr></table></figure></div></li>
<li>类的属性默认都是私有的<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//这里使用public，就可以使得这些属性为公有的</span></span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="type">int</span> speed;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Move</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;; <span class="comment">//注意这里需要一个分号</span></span><br></pre></td></tr></table></figure></div></li>
<li>类的两种实例创建<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Example e_1; <span class="comment">//在栈上创建的，离开作用域后就自动销毁</span></span><br><span class="line">	Example* e_2 = <span class="keyword">new</span> Example; <span class="comment">//在堆上创建的，需要手动销毁（new关键字返回的是指针）</span></span><br><span class="line">	<span class="keyword">delete</span> e_2; <span class="comment">//用new关键字创建在堆上的，需要使用delete删除</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果new创建数组，delete也要加上数组</span></span><br><span class="line">	<span class="type">int</span>* nums = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">delete</span>[] nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-6-2-静态（static）"><a href="#1-6-2-静态（static）" class="headerlink" title="1.6.2.静态（static）"></a>1.6.2.静态（static）</h3><ul>
<li>类或者结构体外的static可以确保静态函数或者变量只在当前翻译单元（cpp文件）被链接。<br>类中的static，使得该变量或者函数仅仅只有一个实例；假设一个类的许多实例对该变量进行改变，改变的始终只有这一个变量；所有实例的这些变量或者函数都指向同一个内存<br>静态方法不能访问非静态变量</li>
<li>局部静态（local static）：在函数中，不会被函数以外调用到，但是有记忆，生存期永远  <div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">//static使得变量i只能被Function函数修改，但是这个i是有记忆的</span></span><br><span class="line">	i++;</span><br><span class="line">	std::cout &lt;&lt; i &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">Function</span>(); <span class="comment">//打印1</span></span><br><span class="line">	<span class="built_in">Function</span>(); <span class="comment">//打印2</span></span><br><span class="line">	<span class="built_in">Function</span>(); <span class="comment">//打印3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-6-3-枚举"><a href="#1-6-3-枚举" class="headerlink" title="1.6.3.枚举"></a>1.6.3.枚举</h3><ul>
<li>枚举将某些数字赋予名词,一定是整数，并且调用形式为：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">	A, B, C <span class="comment">//默认情况下，A，B，C，从0递增</span></span><br><span class="line">&#125;; <span class="comment">//需要一个分号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::cout &lt;&lt; Entity::A &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-6-4-构造函数"><a href="#1-6-4-构造函数" class="headerlink" title="1.6.4.构造函数"></a>1.6.4.构造函数</h3><ul>
<li>构造函数起到一个初始化类的作用，可以对类属性等等进行初始化<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">Entity</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//初始化代码</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">float</span> x) <span class="comment">//可以进行函数重载，即同名函数，因为不同参数而有的不同函数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//对x进行操作</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>构造函数可以被两种方法删除：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将构造函数删除</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Entity</span>() = <span class="keyword">delete</span>; <span class="comment">//这样类就不能被创建实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将构造函数private</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="built_in">Entity</span>(); <span class="comment">//这样类就不能被创建实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-6-5-析构函数"><a href="#1-6-5-析构函数" class="headerlink" title="1.6.5.析构函数"></a>1.6.5.析构函数</h3><ul>
<li>析构函数在对象被销毁的时候调用<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line">	~<span class="built_in">Entity</span>() <span class="comment">//类名前添加一个~</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//对象被删除时的操作</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-6-6-类的继承"><a href="#1-6-6-类的继承" class="headerlink" title="1.6.6.类的继承"></a>1.6.6.类的继承</h3><ul>
<li>继承使得子类继承了父类的所有属性、方法等<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> A = <span class="number">3</span>, B =<span class="number">4</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Plus</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::cout &lt;&lt; A + B &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Entity <span class="comment">//继承类Entity的所有public属性和方法&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> C = <span class="number">5</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">cPlus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		std::cout &lt;&lt; A + B + C &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
在以上的例子中，类Son的实例，实际上也是Entity的实例</li>
</ul>
<h3 id="1-6-7-虚函数"><a href="#1-6-7-虚函数" class="headerlink" title="1.6.7.虚函数"></a>1.6.7.虚函数</h3><ul>
<li>允许我们在子类中重写方法</li>
<li>引入V表（虚函数表），包含基类中所有虚函数映射<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> A = <span class="number">3</span>, B =<span class="number">4</span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Plus</span><span class="params">()</span> <span class="comment">//添加上virtual标记为虚函数</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		std::cout &lt;&lt; A + B &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Entity <span class="comment">//继承类Entity的所有public属性和方法</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> C = <span class="number">5</span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Plus</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="comment">//添加override表明重载函数</span></span><br><span class="line">		std::cout &lt;&lt; A + B + C &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
<li>虚函数的两个缺点</li>
</ul>
<ol>
<li>需要在基类中创造一个指针</li>
<li>需要对V表遍历，从而确定映射的目标函数</li>
</ol>
<h3 id="1-6-8-C-接口（纯虚函数）"><a href="#1-6-8-C-接口（纯虚函数）" class="headerlink" title="1.6.8.C++接口（纯虚函数）"></a>1.6.8.C++接口（纯虚函数）</h3><ul>
<li>父类中的接口只包含未实现的方法作为模板，纯虚函数必须被实现，才可以创建这个子类的实例<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Printable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//创建纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintableSon</span> :<span class="keyword">public</span> Printable</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;PrintableSon&quot;</span>; &#125; <span class="comment">//重载了纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> :<span class="keyword">public</span> Printable, PrintableSon</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function">std::string <span class="title">GetName</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Player&quot;</span>; &#125; <span class="comment">//重载了纯虚函数</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(Printable* Instate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//A-&gt;B，意味着A是指针，-&gt;是成员提取。A必须是指向类、结构、联合的指针</span></span><br><span class="line">	std::cout &lt;&lt; Instate-&gt;<span class="built_in">GetName</span>()&lt;&lt; std::endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">PrintName</span>(<span class="keyword">new</span> <span class="built_in">Player</span>()); <span class="comment">//new Player()返回的是Player实例的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="1-7-一些深入探讨"><a href="#1-7-一些深入探讨" class="headerlink" title="1.7.一些深入探讨"></a>1.7.一些深入探讨</h2><h3 id="1-7-1-C-数组"><a href="#1-7-1-C-数组" class="headerlink" title="1.7.1.C++数组"></a>1.7.1.C++数组</h3><ul>
<li>数组就是表示一堆变量组成的集合  </li>
<li>如果访问数组范围外索引，则会Memory access violation（内存范文违规）  </li>
<li>数组实质上是指针<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> example[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span>* ptr = example; <span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure></div></li>
<li>数组是指针的原理<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">*(<span class="type">int</span>*)((<span class="type">char</span>*)ptr+<span class="number">8</span>)=<span class="number">6</span>； <span class="comment">//将数组是指针的原理展现的很清晰</span></span><br></pre></td></tr></table></figure></div>
首先，ptr是int指针，所以被定义4字节是一个索引；当（char<em>）转化的时候，被定义为了8字节为一个索引；所以加8就是加了一个索引，而（int</em>）就是将其重新转化为int指针，并且赋值为6</li>
</ul>
<h3 id="1-7-2-C-字符串"><a href="#1-7-2-C-字符串" class="headerlink" title="1.7.2.C++字符串"></a>1.7.2.C++字符串</h3><ul>
<li>char是一个字节，char不是在堆，而是在栈上建立</li>
<li>char默认以单引号，char*默认以双引号<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">5</span>] = <span class="string">&quot;Hello&quot;</span>; <span class="comment">//编译器自动分配一个字符数组，其中包含一个额外的空字符表示字符串的结束</span></span><br><span class="line"><span class="type">char</span> *ptr = <span class="string">&quot;Hello&quot;</span>; <span class="comment">//这样ptr直接指向字符串的首地址</span></span><br><span class="line"><span class="type">char</span>* ptr = str; <span class="comment">//str数组名本身也就是字符串的首地址</span></span><br><span class="line"></span><br><span class="line">此外，添加<span class="type">const</span>说明不可修改</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* name = <span class="string">&quot;i am ztl&quot;</span>;</span><br></pre></td></tr></table></figure></div></li>
<li>字符串数组的工作原理：在指针末尾有一个空终止字符00</li>
<li>一个””双引号包括的文本，一般默认为一个char数组</li>
</ul>
<h3 id="1-7-3-CONST"><a href="#1-7-3-CONST" class="headerlink" title="1.7.3.CONST"></a>1.7.3.CONST</h3><ul>
<li>const承诺某些东西的不变性<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> age = <span class="number">90</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>; <span class="comment">//将指针指向地址内的值设为常量</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* a = <span class="keyword">new</span> <span class="type">int</span>; <span class="comment">//将指针指向地址内的值设为常量</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> a = <span class="keyword">new</span> <span class="type">int</span>; <span class="comment">//将指针指向的地址内设为常量，即不能改变指针指向</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> a = <span class="keyword">new</span> <span class="type">int</span>; <span class="comment">//两者都不能修改</span></span><br></pre></td></tr></table></figure></div></li>
<li>const可以使类里面的函数不能修改类<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> var;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//这里的const就使得函数不可以修改类，只能读取类的值</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> var;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>mutable修饰，可以使被const的函数去修改类<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> var;</span><br><span class="line">	<span class="keyword">mutable</span> <span class="type">int</span> var2；</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Get</span><span class="params">()</span> <span class="type">const</span> <span class="comment">//这里的const就使得函数不可以修改类，只能读取类的值</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">mutable</span> var2 = <span class="number">2</span>； <span class="comment">//因为是mutable修饰的变量，所以const函数里面可以将它修改 </span></span><br><span class="line">		<span class="keyword">return</span> var;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-4-类的初始化成员列表"><a href="#1-7-4-类的初始化成员列表" class="headerlink" title="1.7.4.类的初始化成员列表"></a>1.7.4.类的初始化成员列表</h3><ul>
<li>在类的构造函数括号后面紧接着：并将变量赋值：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_number;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Example</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;this is Example_1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Example</span>(<span class="type">int</span> num)</span><br><span class="line">		:<span class="built_in">m_number</span>(num) <span class="comment">//将变量用括号内值赋值</span></span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;this is Example_2 with&quot;</span> &lt;&lt; m_number &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
<li>有一种减少性能消耗的方式<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_number;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Example</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;this is Example_1&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Example</span>(<span class="type">int</span> num)</span><br><span class="line">		:<span class="built_in">m_number</span>(num)</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;this is Example_2 with&quot;</span> &lt;&lt; m_number &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Example m_example;</span><br><span class="line">	<span class="built_in">Entity</span>(<span class="type">int</span> num)</span><br><span class="line">		: <span class="built_in">m_example</span>(num) <span class="comment">//这里就可以防止生成额外的实例</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//m_example = Example(num); //这就导致产生了两个Example实例，而有一个只是创建了没有被实际使用</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-5-三元操作符"><a href="#1-7-5-三元操作符" class="headerlink" title="1.7.5.三元操作符"></a>1.7.5.三元操作符</h3><ul>
<li>实际上就是if-else的语法糖</li>
<li>将要赋值的变量 &#x3D; 判定条件？ 赋值1：赋值2;<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> curNum = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> comNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是正常写法</span></span><br><span class="line"><span class="keyword">if</span> (curNum &gt; comNum)</span><br><span class="line">&#123;</span><br><span class="line">	curNum = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	curNum = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是三元操作符写法</span></span><br><span class="line">curNum = curNum &gt; comNum ? <span class="number">20</span> : <span class="number">30</span>; </span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-6-隐式转换和explicit"><a href="#1-7-6-隐式转换和explicit" class="headerlink" title="1.7.6.隐式转换和explicit"></a>1.7.6.隐式转换和explicit</h3><h4 id="1-7-6-1-隐式构造函数以及转换"><a href="#1-7-6-1-隐式构造函数以及转换" class="headerlink" title="1.7.6.1.隐式构造函数以及转换"></a>1.7.6.1.隐式构造函数以及转换</h4><ul>
<li>构造函数相同，只是在创建实例的时候有一些不同<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_age;</span><br><span class="line">	std::string m_name;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个不同构造函数</span></span><br><span class="line">	<span class="built_in">Example</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">	:m_name = name</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="built_in">Example</span>(<span class="type">int</span> age):<span class="built_in">m_number</span>(num)</span><br><span class="line">	:m_age = age</span><br><span class="line">	&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">Example <span class="title">a</span><span class="params">(<span class="string">&quot;ztl&quot;</span>)</span></span>;</span><br><span class="line">	Example a = <span class="string">&quot;ztl&quot;</span>; <span class="comment">//直接赋值，编译器自动转换为Example（&quot;ztl&quot;）</span></span><br><span class="line">	<span class="function">Example <span class="title">b</span><span class="params">(<span class="number">21</span>)</span></span>;</span><br><span class="line">	Example b = <span class="number">21</span>; <span class="comment">//直接赋值，编译器自动转换21为Example（21）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>将explicit写在构造函数之前，那么就不能隐式转换</li>
</ul>
<h3 id="1-7-7-运算符及其重载"><a href="#1-7-7-运算符及其重载" class="headerlink" title="1.7.7.运算符及其重载"></a>1.7.7.运算符及其重载</h3><h4 id="1-7-7-1-运算符"><a href="#1-7-7-1-运算符" class="headerlink" title="1.7.7.1.运算符"></a>1.7.7.1.运算符</h4><p>+，-，*，&#x2F;，new，delete，逗号，括号等也是运算符，运算符实际上就是函数</p>
<h4 id="1-7-7-2-重载"><a href="#1-7-7-2-重载" class="headerlink" title="1.7.7.2.重载"></a>1.7.7.2.重载</h4><ul>
<li>重载就是赋予新的定义和作用<br>以+为例<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Vector</span>(<span class="type">double</span> x = <span class="number">0</span>, <span class="type">double</span> y = <span class="number">0</span>) : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载加法运算符</span></span><br><span class="line">    Vector <span class="keyword">operator</span>+(<span class="type">const</span> Vector&amp; v) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Vector</span>(x + v.x, y + v.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出向量的坐标</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Vector <span class="title">v1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">Vector <span class="title">v2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    Vector result = v1 + v2; <span class="comment">// 调用重载的加法运算符</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Resultant vector: &quot;</span>;</span><br><span class="line">    result.<span class="built_in">display</span>(); <span class="comment">// 输出结果向量的坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-8-关于this"><a href="#1-7-8-关于this" class="headerlink" title="1.7.8.关于this"></a>1.7.8.关于this</h3><ul>
<li>this是一个指向当前对象的指针，它是每个非静态成员函数的隐含参数</li>
<li>this返回的是指针，所以不是一个对象，而是对象地址，对于对象的变量引用应该是间接的，例如：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>-&gt;x; <span class="comment">//意思是this指针所指向的对象，对这个对象的x变量修改</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-9-关于作用域"><a href="#1-7-9-关于作用域" class="headerlink" title="1.7.9.关于作用域"></a>1.7.9.关于作用域</h3><ul>
<li>当变量是在栈上创建的，脱离了作用域就会自动销毁</li>
<li>当是在堆上创建，脱离了作用域不会自动销毁</li>
<li>一个自动销毁的例子<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Entity</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Create!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	~<span class="built_in">Entity</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		std::cout &lt;&lt; <span class="string">&quot;Destroy!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Entity* m_ptr;</span><br><span class="line">	<span class="built_in">Example</span>(Entity* ptr)</span><br><span class="line">	:<span class="built_in">m_ptr</span>(ptr) <span class="comment">//构造的时候，传递指针</span></span><br><span class="line">	&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	~<span class="built_in">Example</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span> m_ptr; <span class="comment">//析构的时候，将指针删除</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Example e = <span class="keyword">new</span> <span class="built_in">Entity</span>(); <span class="comment">//隐式转换；虽然是栈上创建的Example，但是Entity实例会自动销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-8-1-智能指针（-include-）"><a href="#1-8-1-智能指针（-include-）" class="headerlink" title="1.8.1.智能指针（#include ）"></a>1.8.1.智能指针（#include <memory>）</h3><ul>
<li>unique_ptr指针（默认不能隐式构造，也不能拷贝构造和拷贝赋值，并且同一时间有独占所有权语义）<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;Entity&gt; <span class="title">entity</span><span class="params">(<span class="keyword">new</span> Entity())</span></span>; <span class="comment">//默认不能使用隐式转换，需要手动管理内存;先创建一个Entity，然后传给shared_ptr分配内存</span></span><br><span class="line">std::unique_ptr&lt;Entity&gt; entity = std::make_unique&lt;Entity&gt;; <span class="comment">//更加安全（处理异常）,会自动管理内存，否则造成内存泄漏</span></span><br></pre></td></tr></table></figure></div></li>
<li>shared_ptr指针（存在引用计数）<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::shared_ptr&lt;Entity&gt; <span class="title">entity</span><span class="params">(<span class="keyword">new</span> Entity())</span></span>; <span class="comment">//先创建Entity，然后share_ptr分配一个内存控制空间，用作引用计数</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; entity = std::make_shared&lt;Entity&gt;; <span class="comment">//组合一次性创建，性能强大</span></span><br></pre></td></tr></table></figure></div></li>
<li>还有一个weak_ptr，与shared_ptr一同使用，不会增加引用计数<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">std::weak_ptr&lt;Entity&gt; weakEntity = sharedEntity; <span class="comment">//将一个shared_ptr给weak_ptr弱指针</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-8-2-复制与拷贝构造函数"><a href="#1-8-2-复制与拷贝构造函数" class="headerlink" title="1.8.2.复制与拷贝构造函数"></a>1.8.2.复制与拷贝构造函数</h3><ul>
<li>C++的类默认有拷贝构造函数，用于将</li>
<li>浅拷贝和深拷贝：<br>浅拷贝（Shallow Copy）：<br>浅拷贝是指将一个对象的值复制到另一个对象，而不复制内存地址。换句话说，浅拷贝只复制了对象的引用，而没有复制对象的内容。<br>在浅拷贝中，如果对象内部包含指针或动态分配的内存，那么只会复制指针的值，而不会复制指针所指向的内容。因此，多个对象可能会共享同一块内存，这就可能导致一旦其中一个对象修改了内存中的数据，其他对象也会受到影响。<br>浅拷贝通常是通过对象的复制构造函数或赋值运算符实现的。<br>深拷贝（Deep Copy）：<br>深拷贝是指在复制对象时，会递归地复制对象及其包含的所有数据，而不仅仅是复制对象的引用。这意味着每个对象都有自己独立的内存空间存储数据，彼此之间互不影响。<br>在深拷贝中，对象的所有成员变量以及动态分配的内存都会被复制，因此每个对象都拥有自己的一份数据副本。<br>深拷贝通常需要自定义对象的复制构造函数和赋值运算符，确保在复制过程中进行适当的内存分配和数据复制。</li>
<li>拷贝构造函数：<br>用于创建一个新对象，该对象的内容是另一个同类对象的副本<br>被调用的条件：</li>
</ul>
<ol>
<li>对象初始化，使用一个已经存在的对象来创建另一个新的对象</li>
<li>作为参数传递的时候，会用拷贝构造函数创建一个副本</li>
<li>作为函数的返回值，返回的时候同样创建一个副本<br>如果将拷贝函数 &#x3D; delete;，那么类禁止拷贝</li>
</ol>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>.fbx文件使用</title>
    <url>/Blog/2024/02/02/FBX%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="一、三个组成部分"><a href="#一、三个组成部分" class="headerlink" title="一、三个组成部分"></a>一、三个组成部分</h3><ul>
<li><strong>mesh</strong>：网格，定义物体形状</li>
<li><strong>meterial</strong>：材质，定义表面光学特性</li>
<li><strong>textures</strong>：贴图，定义表面像素颜色</li>
</ul>
<h3 id="二、-fbx使用方式"><a href="#二、-fbx使用方式" class="headerlink" title="二、.fbx使用方式"></a>二、.fbx使用方式</h3><h4 id="1、直接拖动"><a href="#1、直接拖动" class="headerlink" title="1、直接拖动"></a>1、直接拖动</h4><ul>
<li><strong>选择.fbx文件，直接拖到层级窗口</strong></li>
<li><strong>观察节点图标</strong></li>
<li><strong>选中节点，观察inspector中的操作按钮</strong></li>
</ul>
<h4 id="2、材质替换"><a href="#2、材质替换" class="headerlink" title="2、材质替换"></a>2、材质替换</h4><ul>
<li><strong>选择.fbx文件</strong></li>
<li><strong>在inspector里面切到materials属性-&gt;Use Embeded Materials-&gt;On Demand Remap:映射新的材质</strong></li>
<li><strong>Apply应用设置</strong></li>
</ul>
<h5 id="or……"><a href="#or……" class="headerlink" title="or……"></a>or……</h5><ul>
<li><strong>选中.fbx文件</strong></li>
<li><strong>Location：Use External Materials：使用外部材质</strong></li>
<li><strong>Apply，可以获得内嵌材质解压缩后的Materials目录</strong></li>
<li><strong>直接对解压缩后的材质文件进行修改</strong></li>
</ul>
<h4 id="3、分解重组"><a href="#3、分解重组" class="headerlink" title="3、分解重组"></a>3、分解重组</h4><ul>
<li><strong>将fbx文件中的材质单独拿出来使用</strong></li>
</ul>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityStudy</title>
    <url>/Blog/2024/02/04/UnityStudy/</url>
    <content><![CDATA[<h1 id="Unity-使用学习"><a href="#Unity-使用学习" class="headerlink" title="Unity 使用学习"></a>Unity 使用学习</h1><ul>
<li>学习资料参考：<br><a class="link"   href="http://unity.cn/" >unity官方文档（中文版） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://b23.tv/ceAYoyi" >b站阿发教程（十分详尽） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h2><h3 id="1-1-游戏物体"><a href="#1-1-游戏物体" class="headerlink" title="1.1.游戏物体"></a>1.1.游戏物体</h3><ul>
<li>cube：正方体  </li>
<li>sphere：球体  </li>
<li>cylinder：圆柱  </li>
<li>capsule：圆柱头  </li>
<li>plane：平面</li>
</ul>
<h3 id="1-2-资源文件"><a href="#1-2-资源文件" class="headerlink" title="1.2.资源文件"></a>1.2.资源文件</h3><ul>
<li>模型文件Model（*.fbx）</li>
<li>图片文件Texture（*.jpg&#x2F;png&#x2F;psd&#x2F;tif）</li>
<li>音频文件AudioClip（*.mp3&#x2F;wav&#x2F;aiff）</li>
<li>脚本文件Script（*.cs）</li>
<li>材质文件Meterial（*.mat）</li>
<li>场景文件Scene（*.unity）</li>
<li>描述文件Meta（*.meta）</li>
<li>预制体文件Prefab（*.prefab）</li>
</ul>
<h3 id="1-3-资源包"><a href="#1-3-资源包" class="headerlink" title="1.3.资源包"></a>1.3.资源包</h3><ul>
<li>选中资源文件或者目录</li>
<li>右键，点击export package</li>
<li>生成*.unitypackage资源包</li>
<li>依赖文件也可以一并导入</li>
</ul>
<h3 id="1-4-摄像机"><a href="#1-4-摄像机" class="headerlink" title="1.4.摄像机"></a>1.4.摄像机</h3><h4 id="1-4-1-摄像机构成"><a href="#1-4-1-摄像机构成" class="headerlink" title="1.4.1 摄像机构成"></a>1.4.1 摄像机构成</h4><ul>
<li>一个拥有camera组件的gameobject</li>
</ul>
<h4 id="1-4-2-移动方式"><a href="#1-4-2-移动方式" class="headerlink" title="1.4.2 移动方式"></a>1.4.2 移动方式</h4><ol>
<li>手工移动</li>
<li>Align with View，与3D视图对其<br>-&gt;在3D视图里面摆好角度<br>-&gt;选中camera，执行Gameobject<br>-&gt;Align with View（ctrl+shift+F）</li>
<li>可以使视角跟随物体运动：<br>-&gt;Edit<br>-&gt;Lock View to Seleted</li>
</ol>
<h3 id="1-5-脚本"><a href="#1-5-脚本" class="headerlink" title="1.5.脚本"></a>1.5.脚本</h3><h4 id="1-5-1-脚本创建和挂载"><a href="#1-5-1-脚本创建和挂载" class="headerlink" title="1.5.1 脚本创建和挂载"></a>1.5.1 脚本创建和挂载</h4><ul>
<li>脚本创建和编写</li>
<li>脚本挂载：<br>直接拖拽或者Add Component</li>
</ul>
<h4 id="1-5-2-脚本控制物体实例"><a href="#1-5-2-脚本控制物体实例" class="headerlink" title="1.5.2 脚本控制物体实例"></a>1.5.2 脚本控制物体实例</h4><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.Position,物体世界坐标  </span><br><span class="line">transform.LocalPosition,物体本地坐标</span><br></pre></td></tr></table></figure></div>
<h3 id="1-6-帧更新"><a href="#1-6-帧更新" class="headerlink" title="1.6.帧更新"></a>1.6.帧更新</h3><ul>
<li><p>Update（）函数为帧更新函数,常用帧率观察：<br>Time.time，游戏时间<br>Time.deltaTime，距离上次更新时间  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">      Debug.log(<span class="string">&quot;每秒至少60帧&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可以设置unity的帧率：  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Application.targetFrameRate = <span class="number">60</span>; <span class="comment">//将帧率调整为尽量60帧每秒</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-物体的运动"><a href="#1-7-物体的运动" class="headerlink" title="1.7.物体的运动"></a>1.7.物体的运动</h3><ul>
<li>物体运动实例<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> speed = <span class="number">2f</span>; <span class="comment">//设置速度</span></span><br><span class="line">        Vector3 pos = <span class="keyword">this</span>.transform.position; <span class="comment">//获取当前位置</span></span><br><span class="line">        pos.z += speed * Time.deltaTime; <span class="comment">//从速度与帧同步的联系，更改目标</span></span><br><span class="line">        <span class="keyword">this</span>.transform.position = pos; <span class="comment">//将物体移动</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
也可以使用transform.Translate(dx, dy, dz, Space.World&#x2F;Space.Self)进行帧移动：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> speed = <span class="number">2f</span>;</span><br><span class="line"><span class="built_in">float</span> distance = speed * Time.deltaTime;</span><br><span class="line"><span class="keyword">this</span>.transform.Translate(distance, <span class="number">0</span>, distance); <span class="comment">//Transform.Translate(dx, dy, dz)方法可以直接在不同方向上做增量</span></span><br></pre></td></tr></table></figure></div>
改变运动的方向<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">GameObject flag = GameObject.Find(<span class="string">&quot;flag&quot;</span>); <span class="comment">//Gameobject.Find(&quot;name_or_path&quot;)找到目标物体位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.LookAt(flag.transform); <span class="comment">//transform.LookAt(targetGameobject.Transform)将火车头转向目标位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, distance, Space.Self); <span class="comment">//Transform.Translate(dx, dy, dz)方法可以直接在不同方向上做增量</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-8-物体的旋转"><a href="#1-8-物体的旋转" class="headerlink" title="1.8.物体的旋转"></a>1.8.物体的旋转</h3><ul>
<li>四元组旋转(不建议使用)：  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.rotation = (x, y, z, w);</span><br></pre></td></tr></table></figure></div></li>
<li>欧拉角旋转Euler Angle：   <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.eulerAngles = <span class="keyword">new</span> Vector(<span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>);  </span><br><span class="line">transform.localEulerAngles = <span class="keyword">new</span> Vector(<span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li>
<li>可以使用transform.Rotate(x, y, z, Space.Self)进行帧旋转:  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>, <span class="number">200</span> * Time.deltaTime, <span class="number">0</span>, Space.Self);</span><br></pre></td></tr></table></figure></div></li>
<li>自转与公转：<br>原理实际上就是建立父子关系，使用了空物体的技巧，将地月系统放在一个空物体下，地球放在轴心处，转动便成为公转自转</li>
</ul>
<h2 id="2-深入学习"><a href="#2-深入学习" class="headerlink" title="2.深入学习"></a>2.深入学习</h2><h3 id="2-1-脚本运行原理"><a href="#2-1-脚本运行原理" class="headerlink" title="2.1.脚本运行原理"></a>2.1.脚本运行原理</h3><ul>
<li>每个脚本都进行以下实例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Gameobject object1 = <span class="keyword">new</span> Gameobject(); <span class="comment">//实例化节点</span></span><br><span class="line">MeshRender render = <span class="keyword">new</span> Meshrender(); <span class="comment">//实例化组件</span></span><br><span class="line">SimpleLogic script1 = <span class="keyword">new</span> SimpLogic(); <span class="comment">//实例化脚本组件</span></span><br><span class="line">Start(); <span class="comment">//初始化函数</span></span><br><span class="line">Update(); <span class="comment">//帧更新函数</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-2-消息函数-生命周期"><a href="#2-2-消息函数-生命周期" class="headerlink" title="2.2.消息函数&#x2F;生命周期"></a>2.2.消息函数&#x2F;生命周期</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Awake(); <span class="comment">//初始化函数，仅执行一次（早于start）</span></span><br><span class="line">Start(); <span class="comment">//初始化函数，仅执行一次</span></span><br><span class="line">Update(); <span class="comment">//帧更新，每帧调用一次</span></span><br><span class="line">OnEnable(); <span class="comment">//每当组件启用时调用</span></span><br><span class="line">OnDisable(); <span class="comment">//每当组件禁用时调用</span></span><br></pre></td></tr></table></figure></div>
<h3 id="2-3-脚本执行优先级"><a href="#2-3-脚本执行优先级" class="headerlink" title="2.3.脚本执行优先级"></a>2.3.脚本执行优先级</h3><p>选中一个脚本，在inspector界面选择Execution Order，通过拖动或者手动调节脚本执行优先级（优先级值越小，优先级越高）</p>
<h3 id="2-4-主控脚本"><a href="#2-4-主控脚本" class="headerlink" title="2.4.主控脚本"></a>2.4.主控脚本</h3><p>游戏的主控逻辑存放脚本，例如：帧率，全局逻辑，全局设置等，然后放在一个主控节点上</p>
<h3 id="2-5-参数类型"><a href="#2-5-参数类型" class="headerlink" title="2.5.参数类型"></a>2.5.参数类型</h3><h4 id="2-5-1-值类型："><a href="#2-5-1-值类型：" class="headerlink" title="2.5.1. 值类型："></a>2.5.1. 值类型：</h4><p>int，float，bool，string，Vector，color<br>值类型不能为null</p>
<h4 id="2-5-2-引用类型："><a href="#2-5-2-引用类型：" class="headerlink" title="2.5.2. 引用类型："></a>2.5.2. 引用类型：</h4><p>GameObject，Transform，MeshRender，AudioSource，Meterial，Texture，AudioClip<br>都可以放到类的属性中，然后去到inspector赋值</p>
<h3 id="2-6-鼠标键盘等输入"><a href="#2-6-鼠标键盘等输入" class="headerlink" title="2.6.鼠标键盘等输入"></a>2.6.鼠标键盘等输入</h3><h4 id="2-6-1-鼠标输入"><a href="#2-6-1-鼠标输入" class="headerlink" title="2.6.1.鼠标输入"></a>2.6.1.鼠标输入</h4><ul>
<li>事件只会触发一次，并且状态每帧一次，全局事件互不干扰<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Input.GetMouseButtonDown(); <span class="comment">//鼠标按下触发（0是左键，1是右键，2是中键）</span></span><br><span class="line">Input.GetMouseButtonDown(); <span class="comment">//鼠标放开触发</span></span><br><span class="line">Input.GetMouseButton(); <span class="comment">//鼠标按住触发</span></span><br><span class="line">Input.mousePosition(); <span class="comment">//获取屏幕坐标</span></span><br></pre></td></tr></table></figure></div></li>
<li>屏幕坐标<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Camera.main.WorldToScreenPoint(worldPos); <span class="comment">//将世界坐标转换为屏幕坐标</span></span><br><span class="line">Screen.width; <span class="comment">//屏幕宽度</span></span><br><span class="line">Screen.height; <span class="comment">//屏幕高度</span></span><br></pre></td></tr></table></figure></div></li>
<li>键盘输入<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Input.GetKeyDown(keycode); <span class="comment">//键盘按下</span></span><br><span class="line">Input.GetKeyUp(keycode); <span class="comment">//键盘松开</span></span><br><span class="line">Input.GetKey(keycode); <span class="comment">//键盘按住</span></span><br><span class="line">Keycode.A; <span class="comment">//键盘A</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-7-组件调用"><a href="#2-7-组件调用" class="headerlink" title="2.7.组件调用"></a>2.7.组件调用</h3><ul>
<li>以音乐播放器为例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">AudioSource audio = <span class="keyword">this</span>.GetComponent&lt;AudioSource&gt;(); <span class="comment">//获取AudioSource组件</span></span><br><span class="line">audio.Play(); <span class="comment">//播放</span></span><br></pre></td></tr></table></figure></div>
其中&lt;&gt;表示泛型，即获取<AudioSource>类型的组件  </li>
<li>也可以直接将所需要组件以public写出，拖拽组件所在节点，便会自动寻找到节点中的该组件</li>
<li>引用其他节点中的脚本组件同理可得，然后对组件中进行函数调用、属性修改等等</li>
<li>还可以使用消息调用方法： <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Gameobject <span class="built_in">object</span>;</span><br><span class="line"><span class="built_in">object</span>.SendMessage(<span class="string">&quot;Method&quot;</span>, index);</span><br></pre></td></tr></table></figure></div>
SendMessage的内部执行（反射机制，本质上是同步调用）：<br>1.找到target节点下所有组件<br>2.寻找Method函数<br>-&gt; 如果存在,调用它<br>-&gt; 如果不存在，继续遍历组件查找<br>-&gt; 最终如果无法匹配，则报错</li>
</ul>
<h3 id="2-8-物体获取"><a href="#2-8-物体获取" class="headerlink" title="2.8.物体获取"></a>2.8.物体获取</h3><h4 id="2-8-1-直接获取物体"><a href="#2-8-1-直接获取物体" class="headerlink" title="2.8.1.直接获取物体"></a>2.8.1.直接获取物体</h4><ul>
<li>通过Find方法（名字和路径）获取：   <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Gameobject <span class="built_in">object</span> = Gameobject.Find(<span class="string">&quot;name_or_path&quot;</span>); <span class="comment">//指定name或者path获取</span></span><br></pre></td></tr></table></figure></div>
这种方法两个弊端：<br>1.不安全：如果修改节点名称，那么查找不到<br>2.需要遍历查找  </li>
<li>通过inspector拖拽获取  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Gameobject <span class="built_in">object</span>; <span class="comment">//定义一个public变量，在inspector可以获取</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="2-8-2-父子物体获取"><a href="#2-8-2-父子物体获取" class="headerlink" title="2.8.2.父子物体获取"></a>2.8.2.父子物体获取</h4><p><strong>获取需要使用Transform作为媒介</strong>  </p>
<ol>
<li>获取父级物体：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform parent = <span class="keyword">this</span>.transform.parent; <span class="comment">//获取父级Transform</span></span><br><span class="line">Gameobject parentNode = <span class="keyword">this</span>.transform.parent.gameObject; <span class="comment">//获取父级节点</span></span><br></pre></td></tr></table></figure></div></li>
<li>获取子级物体：<br>通过遍历获取：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(Transform child <span class="keyword">in</span> transform) <span class="comment">//遍历所有子节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		Debug.log(<span class="string">&quot;*子物体：&quot;</span> + child.name);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
通过索引获取：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform firstChild = <span class="keyword">this</span>.Transform.GetChild(<span class="number">0</span>); <span class="comment">//获取所有子节点中的第一个子节点</span></span><br></pre></td></tr></table></figure></div>
通过名称查找子项：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform bb = <span class="keyword">this</span>.Transform.Find(<span class="string">&quot;aa/bb&quot;</span>); <span class="comment">//可以直接是名称，二级子级应该写上路径</span></span><br></pre></td></tr></table></figure></div></li>
<li>物体的操作<br>更换gameobject的父级：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.Transform.SetParent(<span class="string">&quot;name_or_path_or_null&quot;</span>); <span class="comment">//可以是名称，也可以是路径，是null时，表示一级节点</span></span><br></pre></td></tr></table></figure></div>
设置active：  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.transform.gameObject.activeSelf) <span class="comment">//作为判断条件</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>.transform.gameObject.SetActive(<span class="literal">false</span>); <span class="comment">//设置为不显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>.transform.gameObject.SetActive(<span class="literal">true</span>); <span class="comment">//设置为显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="2-9-脚本资源使用"><a href="#2-9-脚本资源使用" class="headerlink" title="2.9.脚本资源使用"></a>2.9.脚本资源使用</h3><h4 id="2-9-1单个资源使用"><a href="#2-9-1单个资源使用" class="headerlink" title="2.9.1单个资源使用"></a>2.9.1单个资源使用</h4><ul>
<li>在脚本中，资源对应变量：<br>音频文件：AudioClip<br>纹理贴图：Texture<br>材质：Material</li>
<li>以音频文件的使用为例：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AudioClip chgeAudio; <span class="comment">//定义音频文件</span></span><br><span class="line"><span class="keyword">private</span> AudioSource audioIndex; <span class="comment">//定义音频组件</span></span><br><span class="line">audioIndex = <span class="keyword">this</span>.transform.GetComponent&lt;AudioSource&gt;(); <span class="comment">//获取组件</span></span><br><span class="line">audioIndex.PlayOneShot(chgeAudio); <span class="comment">//使用组件播放音频文件</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-10-定时调用"><a href="#2-10-定时调用" class="headerlink" title="2.10.定时调用"></a>2.10.定时调用</h3><ul>
<li>定时调用Invoke*，即一般所谓的定时器<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.Invoke(<span class="string">&quot;Func&quot;</span>, delay); <span class="comment">//定时delay秒后进行Func函数调用</span></span><br><span class="line"><span class="keyword">this</span>.InvokeRepeating(<span class="string">&quot;Func&quot;</span>, delay, interval); <span class="comment">//每隔interval秒调用一次</span></span><br><span class="line"><span class="keyword">this</span>.IsInvoking(<span class="string">&quot;Func&quot;</span>); <span class="comment">//是否正在调度中，返回bool</span></span><br><span class="line"><span class="keyword">this</span>.CancelInvoke(<span class="string">&quot;Func&quot;</span>); <span class="comment">//取消调用，从调度队列中移除</span></span><br><span class="line"><span class="keyword">this</span>.CancelInvoke(); <span class="comment">//取消当前脚本所有调度</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-11-向量使用"><a href="#2-11-向量使用" class="headerlink" title="2.11.向量使用"></a>2.11.向量使用</h3><p>简单使用  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Vector3 v = <span class="keyword">new</span> Vector3(x, y, z); <span class="comment">//向量创建</span></span><br><span class="line"><span class="built_in">float</span> v = v.magnitude; <span class="comment">//获取向量模</span></span><br><span class="line">Vector3 v1 = v.normalized; <span class="comment">//标准化向量（模长为1）</span></span><br><span class="line">Vector.Distance(a, b); <span class="comment">//直接计算两个点之间举例</span></span><br></pre></td></tr></table></figure></div>
<p>常用几个向量：<br>Vector3.zero:(0, 0, 0)<br>Vector3.up:(0, 1, 0)<br>Vector3.right:(1, 0, 0)<br>Vector3.forward:(0, 0, 1)<br>向量乘法、点积和叉积：  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">b = a * <span class="number">2</span>;</span><br><span class="line">c = Vector3.Dot(a, b); <span class="comment">//点积</span></span><br><span class="line">c = Vector3.Cross(a, b); <span class="comment">//叉积</span></span><br></pre></td></tr></table></figure></div>
<p>可以使用向量作为参数：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Vector3 speed; <span class="comment">//在inspector中将向量速度输入</span></span><br><span class="line"><span class="keyword">this</span>.Transform.Translate(speed * Time.deltaTime, Space.Self); <span class="comment">//直接将向量参数输入</span></span><br></pre></td></tr></table></figure></div>
<h3 id="2-12-预制体使用"><a href="#2-12-预制体使用" class="headerlink" title="2.12.预制体使用"></a>2.12.预制体使用</h3><ul>
<li>预制体的生成与使用</li>
<li>预制体的三种编辑方式<br>1.单独编辑：双击预制体<br>2.原位编辑：选择实例Instance，Inspector里面选择open<br>3.覆盖修改：选中Instance，编辑后选中Overri|Apply，应用编辑；Override|Revert，取消编辑</li>
<li>脚本创建预制体实例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Object.Instantiate(prefab, parent); <span class="comment">//prebfab是预制体，parent是可以设置预制体的生成父节点。返回值为一个GameObject</span></span><br></pre></td></tr></table></figure></div></li>
<li>创建实例后的初始化<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Instance.transform.position = (x, y, z); <span class="comment">//可以使用空节点作为定位，获取空节点位置</span></span><br><span class="line">Instance.transform.eulerAngles = (x, y, z); <span class="comment">//实例的角度</span></span><br></pre></td></tr></table></figure></div></li>
<li>实例的销毁  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Object.Destroy(Instance, delay); <span class="comment">//delay秒后销毁实例对象。Destroy会在Update之后执行</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="3-物理与特效"><a href="#3-物理与特效" class="headerlink" title="3.物理与特效"></a>3.物理与特效</h2><h3 id="3-1-物理系统"><a href="#3-1-物理系统" class="headerlink" title="3.1.物理系统"></a>3.1.物理系统</h3><ul>
<li>添加刚体组件Rigidbody，添加后，由物理引擎接管物体运动</li>
</ul>
<h3 id="3-2-刚体碰撞"><a href="#3-2-刚体碰撞" class="headerlink" title="3.2.刚体碰撞"></a>3.2.刚体碰撞</h3><ul>
<li>碰撞体Colider，描述了物体的碰撞范围<br>Box Collider：长方碰撞体<br>SphereCollider：球形碰撞体</li>
</ul>
<h3 id="3-3-反弹与摩擦"><a href="#3-3-反弹与摩擦" class="headerlink" title="3.3.反弹与摩擦"></a>3.3.反弹与摩擦</h3><ul>
<li>创建Physic Material</li>
<li>参数：</li>
</ul>
<p>Dynamic Friction：动摩擦系数<br>Static Friction：静摩擦系数<br>Bounciness：反弹系数</p>
<h3 id="3-4-碰撞检测"><a href="#3-4-碰撞检测" class="headerlink" title="3.4.碰撞检测"></a>3.4.碰撞检测</h3><ul>
<li>碰撞<br>条件：两个物体都有碰撞体+至少有个物体有刚体。<br>注意：<br>（1）Unity中碰撞体独立于物体大小，与物体的MeshFilter大小无关。<br>（2）只有碰撞体才能被射线检测到，否则无法被检测。<br>（3）只有刚体才会有受力效果。<br>（4）isKinematic就有点像把刚体关了，但没完全关，因为保留了物理特性如质量，速度等等。</li>
<li>触发<br>条件：产生碰撞的条件(两个物体都有碰撞体+至少有个物体有刚体)+两个物体至少有个有触发器<br>注意：<br>（1）碰撞检测和触发检测不能同时触发，如果是触发检测方法调用就不可能会有碰撞检测方法调用。</li>
</ul>
<h2 id="附：unity以及rider快捷键"><a href="#附：unity以及rider快捷键" class="headerlink" title="附：unity以及rider快捷键"></a>附：unity以及rider快捷键</h2><h3 id="rider："><a href="#rider：" class="headerlink" title="rider："></a>rider：</h3><p>快速注释：ctrl+K，ctrl+C<br>选中当前灭光标所在单词：ctrl+W<br>多光标：shift+alt+鼠标&#x2F;上下键</p>
<h3 id="unity："><a href="#unity：" class="headerlink" title="unity："></a>unity：</h3><p>可以使视角跟随物体运动：-&gt;Edit-&gt;Lock View to Seleted</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity实现小地图创建</title>
    <url>/Blog/2024/02/08/Unity%E5%AE%9E%E7%8E%B0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Unity相关</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Particle System</title>
    <url>/Blog/2024/02/08/Unity%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h1 id="Unity-Particle-System"><a href="#Unity-Particle-System" class="headerlink" title="Unity Particle System"></a>Unity Particle System</h1><h3 id="1-1-粒子系统"><a href="#1-1-粒子系统" class="headerlink" title="1.1.粒子系统"></a>1.1.粒子系统</h3><ul>
<li>添加一个ParticleSystem</li>
<li>预览与运行</li>
<li>模块与参数<br>1个主模块（基础参数）和22个子模块（扩展参数）<br>默认启用3个子模块：</li>
</ul>
<ol>
<li>Emission，发射的频率</li>
<li>Shape，粒子发生器的形状</li>
<li>Render，粒子的显示</li>
</ol>
<h3 id="1-2-粒子本质"><a href="#1-2-粒子本质" class="headerlink" title="1.2.粒子本质"></a>1.2.粒子本质</h3><ul>
<li>粒子是一个个小纸片，而粒子系统就是一个不短创建并且发射出去的粒子发生器</li>
<li>可以使用Render中的render mode进行修改渲染模式：<br>Billbord：广告牌，自动旋转，始终面向相机</li>
</ul>
<h3 id="1-3-贴图"><a href="#1-3-贴图" class="headerlink" title="1.3.贴图"></a>1.3.贴图</h3><ul>
<li>对于贴图material，使用着色器：<br>Shader：Praticles|Standered Unit<br>Render Mode:Additive<br>Color Mode:Multiply<br>Albedo:指定贴图</li>
</ul>
<h3 id="1-4-周期和时长"><a href="#1-4-周期和时长" class="headerlink" title="1.4.周期和时长"></a>1.4.周期和时长</h3><ul>
<li>Duration：周期，粒子系统的工作时长</li>
<li>Looping：循环，粒子系统工作一次&#x2F;循环工作</li>
<li>Prewarm：预热，粒子系统是否先预热一个周期</li>
<li>Strat Lifetime：粒子的生命时长，默认五秒</li>
</ul>
<h3 id="1-5-模拟空间"><a href="#1-5-模拟空间" class="headerlink" title="1.5.模拟空间"></a>1.5.模拟空间</h3><ul>
<li>Simulation Space模块<br>Local，本地空间，粒子会以粒子发生器为中心<br>World，世界空间，粒子使用世界坐标系</li>
</ul>
<h3 id="1-6-发射"><a href="#1-6-发射" class="headerlink" title="1.6.发射"></a>1.6.发射</h3><h4 id="1-6-1-发射方式"><a href="#1-6-1-发射方式" class="headerlink" title="1.6.1.发射方式"></a>1.6.1.发射方式</h4><ul>
<li>Emission：匀速发射<br>Rate over Time:按时间发射（一般用于静止）<br>Rate over Distance：按距离发射（一般用于运动物体）<br>Max Particles：最大存在粒子数</li>
<li>Brusts：爆发式发射<br>Time：爆炸发生时间<br>Count：爆出多少个粒子<br>Cycles&#x2F;Interval：爆炸次数&#x2F;间隔<br>Probability：爆炸的可能概率，0表示不会爆炸</li>
</ul>
<h4 id="1-6-2-发射器形状"><a href="#1-6-2-发射器形状" class="headerlink" title="1.6.2.发射器形状"></a>1.6.2.发射器形状</h4><ul>
<li>Shape模块<br>Cone：锥形<br>Sphere：球形<br>Hemisphere：半球形<br>Box：盒形<br>Circle：圆形<br>Rectangle：长方形</li>
</ul>
<h3 id="1-7-渐变"><a href="#1-7-渐变" class="headerlink" title="1.7.渐变"></a>1.7.渐变</h3><h4 id="1-7-1-颜色渐变"><a href="#1-7-1-颜色渐变" class="headerlink" title="1.7.1.颜色渐变"></a>1.7.1.颜色渐变</h4><ul>
<li>Color over Lifetime模块<br>上面是透明度，下面是颜色，可以在上面设置多个透明度，以达到淡入淡出的效果<br>颜色的最终值 &#x3D; 初始颜色 * Color over Time设置的颜色（RGB分别相乘）</li>
</ul>
<h4 id="1-7-2-大小渐变"><a href="#1-7-2-大小渐变" class="headerlink" title="1.7.2.大小渐变"></a>1.7.2.大小渐变</h4><ul>
<li>Size over Lifetime模块<br>曲线变化：横坐标lifetime，纵坐标size</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/Blog/2024/02/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy  </span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>实现Unity中UI的拖拽</title>
    <url>/Blog/2024/03/15/%E5%AE%9E%E7%8E%B0Unity%E4%B8%ADUI%E7%9A%84%E6%8B%96%E6%8B%BD/</url>
    <content><![CDATA[<h1 id="实现Unity中UI的拖拽"><a href="#实现Unity中UI的拖拽" class="headerlink" title="实现Unity中UI的拖拽"></a>实现Unity中UI的拖拽</h1><ul>
<li>需要将屏幕坐标转换为世界坐标<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UIElements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerControal</span> : <span class="title">MonoBehaviour</span>,<span class="title">IBeginDragHandler</span>,<span class="title">IDragHandler</span>,<span class="title">IEndDragHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isDragging = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector3 offset;</span><br><span class="line">    <span class="keyword">private</span> Vector2 position;</span><br><span class="line">    <span class="keyword">private</span> RectTransform rectTransform;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        rectTransform = GetComponent&lt;RectTransform&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;开始拖拽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 pos;</span><br><span class="line">        RectTransformUtility.ScreenPointToWorldPointInRectangle(rectTransform, eventData.position, eventData.enterEventCamera, <span class="keyword">out</span> pos);</span><br><span class="line">        rectTransform.position = pos;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;结束拖拽&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/Blog/2024/03/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="1-插入排序"><a href="#1-插入排序" class="headerlink" title="1.插入排序"></a>1.插入排序</h2><p>将无序序列中的值与有序序列中每一个值进行比较并且插入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">insertionSort(arr)</span><br><span class="line"> n = arr.length</span><br><span class="line"> </span><br><span class="line"> // 从第二个元素开始遍历数组</span><br><span class="line"> for i from 1 to n-1 do</span><br><span class="line">   // 将当前元素插入已排序部分的合适位置</span><br><span class="line">   key = arr[i]</span><br><span class="line">   j = i - 1</span><br><span class="line">   </span><br><span class="line">   // 将比当前元素大的元素向后移动</span><br><span class="line">   while j &gt;= 0 and arr[j] &gt; key do</span><br><span class="line">     arr[j + 1] = arr[j]</span><br><span class="line">     j = j - 1</span><br><span class="line">   </span><br><span class="line">   // 将当前元素插入到正确位置</span><br><span class="line">   arr[j + 1] = key</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="2-希尔排序"><a href="#2-希尔排序" class="headerlink" title="2.希尔排序"></a>2.希尔排序</h2><p>通过缩小增量进行排序，达到排序结果</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function shellSort(arr)</span><br><span class="line">    n = arr.length</span><br><span class="line">    gap = n / 2</span><br><span class="line">    while gap &gt; 0</span><br><span class="line">        for i = gap to n - 1</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i</span><br><span class="line">            while j &gt;= gap and arr[j - gap] &gt; temp</span><br><span class="line">                arr[j] = arr[j - gap]</span><br><span class="line">                j = j - gap</span><br><span class="line">            arr[j] = temp</span><br><span class="line">        gap = gap / 2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="3-冒泡排序"><a href="#3-冒泡排序" class="headerlink" title="3.冒泡排序"></a>3.冒泡排序</h2><p>从第一个开始两两比较，进行两两排序，每排完一个循环，总有一个大值从后往前归到正确位置，所以叫冒泡法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">procedure bubbleSort(arr)</span><br><span class="line">    n = length(arr)</span><br><span class="line">    for i from 0 to n-1</span><br><span class="line">        for j from 0 to n-i-1</span><br><span class="line">            if arr[j] &gt; arr[j+1]</span><br><span class="line">                swap(arr[j], arr[j+1])</span><br></pre></td></tr></table></figure></div>
<h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4.快速排序"></a>4.快速排序</h2><ol>
<li>在待排序表L[1…n]中任取⼀个元素pivot作为枢轴（或基准）  </li>
<li>通过⼀趟排序将待排序表划分为独⽴的两部分L[1…k-1]和L[k+1…n]，使得L[1…k-1]中的所有元素⼩于pivot，L[k+1…n]中的所有元素⼤于等于 pivot，则pivot放在了其最终位置L(k)上，这个过程称为⼀次“划分”。  </li>
<li>然后分别递归地对两个⼦表重复上述过程，直每部分内只有⼀个元素或空为⽌，即所有元素放在了其最终位置上。<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function quickSort(arr, low, high)</span><br><span class="line"> if low &lt; high</span><br><span class="line">     pi = partition(arr, low, high)</span><br><span class="line">     quickSort(arr, low, pi - 1) // Before pi</span><br><span class="line">     quickSort(arr, pi + 1, high) // After pi</span><br><span class="line"></span><br><span class="line">function partition(arr, low, high)</span><br><span class="line"> pivot = arr[high]</span><br><span class="line"> i = low - 1 //保证 i 指向的是小于等于基准值的元素的最后一个位置</span><br><span class="line"> for j from low to high - 1</span><br><span class="line">     if arr[j] &lt;= pivot</span><br><span class="line">         i = i + 1</span><br><span class="line">         swap(arr[i], arr[j])</span><br><span class="line"> swap(arr[i + 1], arr[high])</span><br><span class="line"> return i + 1</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="5-选择排序（逻辑最简单，最稳定）"><a href="#5-选择排序（逻辑最简单，最稳定）" class="headerlink" title="5.选择排序（逻辑最简单，最稳定）"></a>5.选择排序（逻辑最简单，最稳定）</h2><p>每一次将无序序列中最小的数追加到有序序列的里面</p>
<h2 id="6-堆排序"><a href="#6-堆排序" class="headerlink" title="6.堆排序"></a>6.堆排序</h2><p>大根堆：根节点是最大的<br>小根堆：根节点是最小的<br>建立堆，然后使用堆排序调整堆。简而言之就是每次把未排序中最大数，放到有序序列的最小处</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">heapSort(arr)</span><br><span class="line">    n = arr.length</span><br><span class="line">    </span><br><span class="line">    // 构建最大堆</span><br><span class="line">    for i from n/2 - 1 down to 0 do</span><br><span class="line">        heapify(arr, n, i)</span><br><span class="line">    </span><br><span class="line">    // 从堆顶开始逐步将最大值移到数组末尾，并进行调整</span><br><span class="line">    for i from n - 1 down to 1 do</span><br><span class="line">        swap(arr[0], arr[i]) // 将堆顶元素（最大值）与当前未排序部分的末尾元素交换</span><br><span class="line">        heapify(arr, i, 0)   // 对剩余元素重新进行堆调整，保持最大堆性质</span><br><span class="line"></span><br><span class="line">// 调整堆，保持最大堆性质</span><br><span class="line">heapify(arr, n, i)</span><br><span class="line">    largest = i   // 初始化父节点索引为最大值索引</span><br><span class="line">    left = 2 * i + 1   // 左子节点索引</span><br><span class="line">    right = 2 * i + 2  // 右子节点索引</span><br><span class="line">    </span><br><span class="line">    // 检查左子节点是否大于父节点</span><br><span class="line">    if left &lt; n and arr[left] &gt; arr[largest] then</span><br><span class="line">        largest = left</span><br><span class="line">    </span><br><span class="line">    // 检查右子节点是否大于父节点或左子节点</span><br><span class="line">    if right &lt; n and arr[right] &gt; arr[largest] then</span><br><span class="line">        largest = right</span><br><span class="line">    </span><br><span class="line">    // 如果最大值不是父节点，则进行交换，并递归调整受影响的子树</span><br><span class="line">    if largest != i then</span><br><span class="line">        swap(arr[i], arr[largest])</span><br><span class="line">        heapify(arr, n, largest)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="7-归并排序"><a href="#7-归并排序" class="headerlink" title="7.归并排序"></a>7.归并排序</h2><ul>
<li>先将序列分成两个序列，分别进行排序，随后将两个序列进行合并<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mergeSort(arr)</span><br><span class="line">  n = arr.length</span><br><span class="line">  // 如果数组只有一个元素，直接返回</span><br><span class="line">  if n &lt; 2 then</span><br><span class="line">    return</span><br><span class="line">  </span><br><span class="line">  // 计算中间索引</span><br><span class="line">  mid = n / 2</span><br><span class="line">  </span><br><span class="line">  // 创建左右子数组</span><br><span class="line">  left = arr[0...mid-1]</span><br><span class="line">  right = arr[mid...n-1]</span><br><span class="line">  </span><br><span class="line">  // 递归地对左右子数组进行排序</span><br><span class="line">  mergeSort(left)</span><br><span class="line">  mergeSort(right)</span><br><span class="line">  </span><br><span class="line">  // 合并左右两个有序子数组</span><br><span class="line">  merge(arr, left, right)</span><br><span class="line"></span><br><span class="line">merge(arr, left, right)</span><br><span class="line">  nL = left.length</span><br><span class="line">  nR = right.length</span><br><span class="line">  i = 0, j = 0, k = 0</span><br><span class="line">  </span><br><span class="line">  // 合并左右两个有序子数组</span><br><span class="line">  while i &lt; nL and j &lt; nR do</span><br><span class="line">    if left[i] &lt;= right[j] then</span><br><span class="line">      arr[k] = left[i]</span><br><span class="line">      i = i + 1</span><br><span class="line">    else</span><br><span class="line">      arr[k] = right[j]</span><br><span class="line">      j = j + 1</span><br><span class="line">    k = k + 1</span><br><span class="line">  </span><br><span class="line">  // 处理剩余元素</span><br><span class="line">  while i &lt; nL do</span><br><span class="line">    arr[k] = left[i]</span><br><span class="line">    i = i + 1</span><br><span class="line">    k = k + 1</span><br><span class="line">  </span><br><span class="line">  while j &lt; nR do</span><br><span class="line">    arr[k] = right[j]</span><br><span class="line">    j = j + 1</span><br><span class="line">    k = k + 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="8-基数排序"><a href="#8-基数排序" class="headerlink" title="8.基数排序"></a>8.基数排序</h2><ul>
<li>非比较序列，并不直接进行数的大小比较，而是对每一位进行比较<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取数组中最大元素的位数</span><br><span class="line">function getMax(arr):</span><br><span class="line">    max = arr[0]</span><br><span class="line">    for i from 1 to arr.length - 1 do</span><br><span class="line">        if arr[i] &gt; max then</span><br><span class="line">            max = arr[i]</span><br><span class="line">    return max</span><br><span class="line"></span><br><span class="line">// 对数组按照指定位数进行计数排序</span><br><span class="line">function countingSort(arr, exp):</span><br><span class="line">    n = arr.length</span><br><span class="line">    output = new Array(n)</span><br><span class="line">    count = new Array(10)</span><br><span class="line">    for i from 0 to 9 do</span><br><span class="line">        count[i] = 0</span><br><span class="line"></span><br><span class="line">    // 统计每个桶中元素的个数</span><br><span class="line">    for i from 0 to n - 1 do</span><br><span class="line">        index = (arr[i] / exp) % 10</span><br><span class="line">        count[index]++</span><br><span class="line"></span><br><span class="line">    // 将计数数组转换为位置索引数组</span><br><span class="line">    for i from 1 to 9 do</span><br><span class="line">        count[i] += count[i - 1]</span><br><span class="line"></span><br><span class="line">    // 将元素按照当前位的值放置到输出数组中</span><br><span class="line">    for i from n - 1 down to 0 do</span><br><span class="line">        index = (arr[i] / exp) % 10</span><br><span class="line">        output[count[index] - 1] = arr[i]</span><br><span class="line">        count[index]--</span><br><span class="line"></span><br><span class="line">    // 将输出数组复制回原数组</span><br><span class="line">    for i from 0 to n - 1 do</span><br><span class="line">        arr[i] = output[i]</span><br><span class="line"></span><br><span class="line">// 基数排序函数</span><br><span class="line">function radixSort(arr):</span><br><span class="line">    max = getMax(arr)</span><br><span class="line">    exp = 1</span><br><span class="line">    while max / exp &gt; 0 do</span><br><span class="line">        countingSort(arr, exp)</span><br><span class="line">        exp *= 10</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ul>
]]></content>
  </entry>
</search>
