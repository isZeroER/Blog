<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++ Study</title>
    <url>/Blog/2024/02/14/C++%20Study/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Unity实现小地图创建</title>
    <url>/Blog/2024/02/08/Unity%E5%AE%9E%E7%8E%B0%E5%B0%8F%E5%9C%B0%E5%9B%BE%E5%88%9B%E5%BB%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Unity相关</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>.fbx文件使用</title>
    <url>/Blog/2024/02/02/FBX%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="一、三个组成部分"><a href="#一、三个组成部分" class="headerlink" title="一、三个组成部分"></a>一、三个组成部分</h3><ul>
<li><strong>mesh</strong>：网格，定义物体形状</li>
<li><strong>meterial</strong>：材质，定义表面光学特性</li>
<li><strong>textures</strong>：贴图，定义表面像素颜色</li>
</ul>
<h3 id="二、-fbx使用方式"><a href="#二、-fbx使用方式" class="headerlink" title="二、.fbx使用方式"></a>二、.fbx使用方式</h3><h4 id="1、直接拖动"><a href="#1、直接拖动" class="headerlink" title="1、直接拖动"></a>1、直接拖动</h4><ul>
<li><strong>选择.fbx文件，直接拖到层级窗口</strong></li>
<li><strong>观察节点图标</strong></li>
<li><strong>选中节点，观察inspector中的操作按钮</strong></li>
</ul>
<h4 id="2、材质替换"><a href="#2、材质替换" class="headerlink" title="2、材质替换"></a>2、材质替换</h4><ul>
<li><strong>选择.fbx文件</strong></li>
<li><strong>在inspector里面切到materials属性-&gt;Use Embeded Materials-&gt;On Demand Remap:映射新的材质</strong></li>
<li><strong>Apply应用设置</strong></li>
</ul>
<h5 id="or……"><a href="#or……" class="headerlink" title="or……"></a>or……</h5><ul>
<li><strong>选中.fbx文件</strong></li>
<li><strong>Location：Use External Materials：使用外部材质</strong></li>
<li><strong>Apply，可以获得内嵌材质解压缩后的Materials目录</strong></li>
<li><strong>直接对解压缩后的材质文件进行修改</strong></li>
</ul>
<h4 id="3、分解重组"><a href="#3、分解重组" class="headerlink" title="3、分解重组"></a>3、分解重组</h4><ul>
<li><strong>将fbx文件中的材质单独拿出来使用</strong></li>
</ul>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityStudy</title>
    <url>/Blog/2024/02/04/UnityStudy/</url>
    <content><![CDATA[<h1 id="Unity-使用学习"><a href="#Unity-使用学习" class="headerlink" title="Unity 使用学习"></a>Unity 使用学习</h1><ul>
<li>学习资料参考：<br><a class="link"   href="http://unity.cn/" >unity官方文档（中文版） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://b23.tv/ceAYoyi" >b站阿发教程（十分详尽） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h2 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h2><h3 id="1-1-游戏物体"><a href="#1-1-游戏物体" class="headerlink" title="1.1.游戏物体"></a>1.1.游戏物体</h3><ul>
<li>cube：正方体  </li>
<li>sphere：球体  </li>
<li>cylinder：圆柱  </li>
<li>capsule：圆柱头  </li>
<li>plane：平面</li>
</ul>
<h3 id="1-2-资源文件"><a href="#1-2-资源文件" class="headerlink" title="1.2.资源文件"></a>1.2.资源文件</h3><ul>
<li>模型文件Model（*.fbx）</li>
<li>图片文件Texture（*.jpg&#x2F;png&#x2F;psd&#x2F;tif）</li>
<li>音频文件AudioClip（*.mp3&#x2F;wav&#x2F;aiff）</li>
<li>脚本文件Script（*.cs）</li>
<li>材质文件Meterial（*.mat）</li>
<li>场景文件Scene（*.unity）</li>
<li>描述文件Meta（*.meta）</li>
<li>预制体文件Prefab（*.prefab）</li>
</ul>
<h3 id="1-3-资源包"><a href="#1-3-资源包" class="headerlink" title="1.3.资源包"></a>1.3.资源包</h3><ul>
<li>选中资源文件或者目录</li>
<li>右键，点击export package</li>
<li>生成*.unitypackage资源包</li>
<li>依赖文件也可以一并导入</li>
</ul>
<h3 id="1-4-摄像机"><a href="#1-4-摄像机" class="headerlink" title="1.4.摄像机"></a>1.4.摄像机</h3><h4 id="1-4-1-摄像机构成"><a href="#1-4-1-摄像机构成" class="headerlink" title="1.4.1 摄像机构成"></a>1.4.1 摄像机构成</h4><ul>
<li>一个拥有camera组件的gameobject</li>
</ul>
<h4 id="1-4-2-移动方式"><a href="#1-4-2-移动方式" class="headerlink" title="1.4.2 移动方式"></a>1.4.2 移动方式</h4><ol>
<li>手工移动</li>
<li>Align with View，与3D视图对其<br>-&gt;在3D视图里面摆好角度<br>-&gt;选中camera，执行Gameobject<br>-&gt;Align with View（ctrl+shift+F）</li>
<li>可以使视角跟随物体运动：<br>-&gt;Edit<br>-&gt;Lock View to Seleted</li>
</ol>
<h3 id="1-5-脚本"><a href="#1-5-脚本" class="headerlink" title="1.5.脚本"></a>1.5.脚本</h3><h4 id="1-5-1-脚本创建和挂载"><a href="#1-5-1-脚本创建和挂载" class="headerlink" title="1.5.1 脚本创建和挂载"></a>1.5.1 脚本创建和挂载</h4><ul>
<li>脚本创建和编写</li>
<li>脚本挂载：<br>直接拖拽或者Add Component</li>
</ul>
<h4 id="1-5-2-脚本控制物体实例"><a href="#1-5-2-脚本控制物体实例" class="headerlink" title="1.5.2 脚本控制物体实例"></a>1.5.2 脚本控制物体实例</h4><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.Position,物体世界坐标  </span><br><span class="line">transform.LocalPosition,物体本地坐标</span><br></pre></td></tr></table></figure></div>
<h3 id="1-6-帧更新"><a href="#1-6-帧更新" class="headerlink" title="1.6.帧更新"></a>1.6.帧更新</h3><ul>
<li><p>Update（）函数为帧更新函数,常用帧率观察：<br>Time.time，游戏时间<br>Time.deltaTime，距离上次更新时间  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">      Debug.log(<span class="string">&quot;每秒至少60帧&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>可以设置unity的帧率：  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Application.targetFrameRate = <span class="number">60</span>; <span class="comment">//将帧率调整为尽量60帧每秒</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-7-物体的运动"><a href="#1-7-物体的运动" class="headerlink" title="1.7.物体的运动"></a>1.7.物体的运动</h3><ul>
<li>物体运动实例<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">float</span> speed = <span class="number">2f</span>; <span class="comment">//设置速度</span></span><br><span class="line">        Vector3 pos = <span class="keyword">this</span>.transform.position; <span class="comment">//获取当前位置</span></span><br><span class="line">        pos.z += speed * Time.deltaTime; <span class="comment">//从速度与帧同步的联系，更改目标</span></span><br><span class="line">        <span class="keyword">this</span>.transform.position = pos; <span class="comment">//将物体移动</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
也可以使用transform.Translate(dx, dy, dz, Space.World&#x2F;Space.Self)进行帧移动：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> speed = <span class="number">2f</span>;</span><br><span class="line"><span class="built_in">float</span> distance = speed * Time.deltaTime;</span><br><span class="line"><span class="keyword">this</span>.transform.Translate(distance, <span class="number">0</span>, distance); <span class="comment">//Transform.Translate(dx, dy, dz)方法可以直接在不同方向上做增量</span></span><br></pre></td></tr></table></figure></div>
改变运动的方向<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">GameObject flag = GameObject.Find(<span class="string">&quot;flag&quot;</span>); <span class="comment">//Gameobject.Find(&quot;name_or_path&quot;)找到目标物体位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.LookAt(flag.transform); <span class="comment">//transform.LookAt(targetGameobject.Transform)将火车头转向目标位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, distance, Space.Self); <span class="comment">//Transform.Translate(dx, dy, dz)方法可以直接在不同方向上做增量</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="1-8-物体的旋转"><a href="#1-8-物体的旋转" class="headerlink" title="1.8.物体的旋转"></a>1.8.物体的旋转</h3><ul>
<li>四元组旋转(不建议使用)：  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.rotation = (x, y, z, w);</span><br></pre></td></tr></table></figure></div></li>
<li>欧拉角旋转Euler Angle：   <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">transform.eulerAngles = <span class="keyword">new</span> Vector(<span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>);  </span><br><span class="line">transform.localEulerAngles = <span class="keyword">new</span> Vector(<span class="number">0</span>, <span class="number">45</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></li>
<li>可以使用transform.Rotate(x, y, z, Space.Self)进行帧旋转:  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>, <span class="number">200</span> * Time.deltaTime, <span class="number">0</span>, Space.Self);</span><br></pre></td></tr></table></figure></div></li>
<li>自转与公转：<br>原理实际上就是建立父子关系，使用了空物体的技巧，将地月系统放在一个空物体下，地球放在轴心处，转动便成为公转自转</li>
</ul>
<h2 id="2-深入学习"><a href="#2-深入学习" class="headerlink" title="2.深入学习"></a>2.深入学习</h2><h3 id="2-1-脚本运行原理"><a href="#2-1-脚本运行原理" class="headerlink" title="2.1.脚本运行原理"></a>2.1.脚本运行原理</h3><ul>
<li>每个脚本都进行以下实例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Gameobject object1 = <span class="keyword">new</span> Gameobject(); <span class="comment">//实例化节点</span></span><br><span class="line">MeshRender render = <span class="keyword">new</span> Meshrender(); <span class="comment">//实例化组件</span></span><br><span class="line">SimpleLogic script1 = <span class="keyword">new</span> SimpLogic(); <span class="comment">//实例化脚本组件</span></span><br><span class="line">Start(); <span class="comment">//初始化函数</span></span><br><span class="line">Update(); <span class="comment">//帧更新函数</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-2-消息函数-生命周期"><a href="#2-2-消息函数-生命周期" class="headerlink" title="2.2.消息函数&#x2F;生命周期"></a>2.2.消息函数&#x2F;生命周期</h3><div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Awake(); <span class="comment">//初始化函数，仅执行一次（早于start）</span></span><br><span class="line">Start(); <span class="comment">//初始化函数，仅执行一次</span></span><br><span class="line">Update(); <span class="comment">//帧更新，每帧调用一次</span></span><br><span class="line">OnEnable(); <span class="comment">//每当组件启用时调用</span></span><br><span class="line">OnDisable(); <span class="comment">//每当组件禁用时调用</span></span><br></pre></td></tr></table></figure></div>
<h3 id="2-3-脚本执行优先级"><a href="#2-3-脚本执行优先级" class="headerlink" title="2.3.脚本执行优先级"></a>2.3.脚本执行优先级</h3><p>选中一个脚本，在inspector界面选择Execution Order，通过拖动或者手动调节脚本执行优先级（优先级值越小，优先级越高）</p>
<h3 id="2-4-主控脚本"><a href="#2-4-主控脚本" class="headerlink" title="2.4.主控脚本"></a>2.4.主控脚本</h3><p>游戏的主控逻辑存放脚本，例如：帧率，全局逻辑，全局设置等，然后放在一个主控节点上</p>
<h3 id="2-5-参数类型"><a href="#2-5-参数类型" class="headerlink" title="2.5.参数类型"></a>2.5.参数类型</h3><h4 id="2-5-1-值类型："><a href="#2-5-1-值类型：" class="headerlink" title="2.5.1. 值类型："></a>2.5.1. 值类型：</h4><p>int，float，bool，string，Vector，color<br>值类型不能为null</p>
<h4 id="2-5-2-引用类型："><a href="#2-5-2-引用类型：" class="headerlink" title="2.5.2. 引用类型："></a>2.5.2. 引用类型：</h4><p>GameObject，Transform，MeshRender，AudioSource，Meterial，Texture，AudioClip<br>都可以放到类的属性中，然后去到inspector赋值</p>
<h3 id="2-6-鼠标键盘等输入"><a href="#2-6-鼠标键盘等输入" class="headerlink" title="2.6.鼠标键盘等输入"></a>2.6.鼠标键盘等输入</h3><h4 id="2-6-1-鼠标输入"><a href="#2-6-1-鼠标输入" class="headerlink" title="2.6.1.鼠标输入"></a>2.6.1.鼠标输入</h4><ul>
<li>事件只会触发一次，并且状态每帧一次，全局事件互不干扰<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Input.GetMouseButtonDown(); <span class="comment">//鼠标按下触发（0是左键，1是右键，2是中键）</span></span><br><span class="line">Input.GetMouseButtonDown(); <span class="comment">//鼠标放开触发</span></span><br><span class="line">Input.GetMouseButton(); <span class="comment">//鼠标按住触发</span></span><br><span class="line">Input.mousePosition(); <span class="comment">//获取屏幕坐标</span></span><br></pre></td></tr></table></figure></div></li>
<li>屏幕坐标<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Camera.main.WorldToScreenPoint(worldPos); <span class="comment">//将世界坐标转换为屏幕坐标</span></span><br><span class="line">Screen.width; <span class="comment">//屏幕宽度</span></span><br><span class="line">Screen.height; <span class="comment">//屏幕高度</span></span><br></pre></td></tr></table></figure></div></li>
<li>键盘输入<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Input.GetKeyDown(keycode); <span class="comment">//键盘按下</span></span><br><span class="line">Input.GetKeyUp(keycode); <span class="comment">//键盘松开</span></span><br><span class="line">Input.GetKey(keycode); <span class="comment">//键盘按住</span></span><br><span class="line">Keycode.A; <span class="comment">//键盘A</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-7-组件调用"><a href="#2-7-组件调用" class="headerlink" title="2.7.组件调用"></a>2.7.组件调用</h3><ul>
<li>以音乐播放器为例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">AudioSource audio = <span class="keyword">this</span>.GetComponent&lt;AudioSource&gt;(); <span class="comment">//获取AudioSource组件</span></span><br><span class="line">audio.Play(); <span class="comment">//播放</span></span><br></pre></td></tr></table></figure></div>
其中&lt;&gt;表示泛型，即获取<AudioSource>类型的组件  </li>
<li>也可以直接将所需要组件以public写出，拖拽组件所在节点，便会自动寻找到节点中的该组件</li>
<li>引用其他节点中的脚本组件同理可得，然后对组件中进行函数调用、属性修改等等</li>
<li>还可以使用消息调用方法： <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Gameobject <span class="built_in">object</span>;</span><br><span class="line"><span class="built_in">object</span>.SendMessage(<span class="string">&quot;Method&quot;</span>, index);</span><br></pre></td></tr></table></figure></div>
SendMessage的内部执行（反射机制，本质上是同步调用）：<br>1.找到target节点下所有组件<br>2.寻找Method函数<br>-&gt; 如果存在,调用它<br>-&gt; 如果不存在，继续遍历组件查找<br>-&gt; 最终如果无法匹配，则报错</li>
</ul>
<h3 id="2-8-物体获取"><a href="#2-8-物体获取" class="headerlink" title="2.8.物体获取"></a>2.8.物体获取</h3><h4 id="2-8-1-直接获取物体"><a href="#2-8-1-直接获取物体" class="headerlink" title="2.8.1.直接获取物体"></a>2.8.1.直接获取物体</h4><ul>
<li>通过Find方法（名字和路径）获取：   <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Gameobject <span class="built_in">object</span> = Gameobject.Find(<span class="string">&quot;name_or_path&quot;</span>); <span class="comment">//指定name或者path获取</span></span><br></pre></td></tr></table></figure></div>
这种方法两个弊端：<br>1.不安全：如果修改节点名称，那么查找不到<br>2.需要遍历查找  </li>
<li>通过inspector拖拽获取  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Gameobject <span class="built_in">object</span>; <span class="comment">//定义一个public变量，在inspector可以获取</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h4 id="2-8-2-父子物体获取"><a href="#2-8-2-父子物体获取" class="headerlink" title="2.8.2.父子物体获取"></a>2.8.2.父子物体获取</h4><p><strong>获取需要使用Transform作为媒介</strong>  </p>
<ol>
<li>获取父级物体：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform parent = <span class="keyword">this</span>.transform.parent; <span class="comment">//获取父级Transform</span></span><br><span class="line">Gameobject parentNode = <span class="keyword">this</span>.transform.parent.gameObject; <span class="comment">//获取父级节点</span></span><br></pre></td></tr></table></figure></div></li>
<li>获取子级物体：<br>通过遍历获取：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(Transform child <span class="keyword">in</span> transform) <span class="comment">//遍历所有子节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		Debug.log(<span class="string">&quot;*子物体：&quot;</span> + child.name);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></div>
通过索引获取：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform firstChild = <span class="keyword">this</span>.Transform.GetChild(<span class="number">0</span>); <span class="comment">//获取所有子节点中的第一个子节点</span></span><br></pre></td></tr></table></figure></div>
通过名称查找子项：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Transform bb = <span class="keyword">this</span>.Transform.Find(<span class="string">&quot;aa/bb&quot;</span>); <span class="comment">//可以直接是名称，二级子级应该写上路径</span></span><br></pre></td></tr></table></figure></div></li>
<li>物体的操作<br>更换gameobject的父级：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.Transform.SetParent(<span class="string">&quot;name_or_path_or_null&quot;</span>); <span class="comment">//可以是名称，也可以是路径，是null时，表示一级节点</span></span><br></pre></td></tr></table></figure></div>
设置active：  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.transform.gameObject.activeSelf) <span class="comment">//作为判断条件</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>.transform.gameObject.SetActive(<span class="literal">false</span>); <span class="comment">//设置为不显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">this</span>.transform.gameObject.SetActive(<span class="literal">true</span>); <span class="comment">//设置为显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="2-9-脚本资源使用"><a href="#2-9-脚本资源使用" class="headerlink" title="2.9.脚本资源使用"></a>2.9.脚本资源使用</h3><h4 id="2-9-1单个资源使用"><a href="#2-9-1单个资源使用" class="headerlink" title="2.9.1单个资源使用"></a>2.9.1单个资源使用</h4><ul>
<li>在脚本中，资源对应变量：<br>音频文件：AudioClip<br>纹理贴图：Texture<br>材质：Material</li>
<li>以音频文件的使用为例：<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> AudioClip chgeAudio; <span class="comment">//定义音频文件</span></span><br><span class="line"><span class="keyword">private</span> AudioSource audioIndex; <span class="comment">//定义音频组件</span></span><br><span class="line">audioIndex = <span class="keyword">this</span>.transform.GetComponent&lt;AudioSource&gt;(); <span class="comment">//获取组件</span></span><br><span class="line">audioIndex.PlayOneShot(chgeAudio); <span class="comment">//使用组件播放音频文件</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-10-定时调用"><a href="#2-10-定时调用" class="headerlink" title="2.10.定时调用"></a>2.10.定时调用</h3><ul>
<li>定时调用Invoke*，即一般所谓的定时器<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.Invoke(<span class="string">&quot;Func&quot;</span>, delay); <span class="comment">//定时delay秒后进行Func函数调用</span></span><br><span class="line"><span class="keyword">this</span>.InvokeRepeating(<span class="string">&quot;Func&quot;</span>, delay, interval); <span class="comment">//每隔interval秒调用一次</span></span><br><span class="line"><span class="keyword">this</span>.IsInvoking(<span class="string">&quot;Func&quot;</span>); <span class="comment">//是否正在调度中，返回bool</span></span><br><span class="line"><span class="keyword">this</span>.CancelInvoke(<span class="string">&quot;Func&quot;</span>); <span class="comment">//取消调用，从调度队列中移除</span></span><br><span class="line"><span class="keyword">this</span>.CancelInvoke(); <span class="comment">//取消当前脚本所有调度</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="2-11-向量使用"><a href="#2-11-向量使用" class="headerlink" title="2.11.向量使用"></a>2.11.向量使用</h3><p>简单使用  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Vector3 v = <span class="keyword">new</span> Vector3(x, y, z); <span class="comment">//向量创建</span></span><br><span class="line"><span class="built_in">float</span> v = v.magnitude; <span class="comment">//获取向量模</span></span><br><span class="line">Vector3 v1 = v.normalized; <span class="comment">//标准化向量（模长为1）</span></span><br><span class="line">Vector.Distance(a, b); <span class="comment">//直接计算两个点之间举例</span></span><br></pre></td></tr></table></figure></div>
<p>常用几个向量：<br>Vector3.zero:(0, 0, 0)<br>Vector3.up:(0, 1, 0)<br>Vector3.right:(1, 0, 0)<br>Vector3.forward:(0, 0, 1)<br>向量乘法、点积和叉积：  </p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">b = a * <span class="number">2</span>;</span><br><span class="line">c = Vector3.Dot(a, b); <span class="comment">//点积</span></span><br><span class="line">c = Vector3.Cross(a, b); <span class="comment">//叉积</span></span><br></pre></td></tr></table></figure></div>
<p>可以使用向量作为参数：</p>
<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Vector3 speed; <span class="comment">//在inspector中将向量速度输入</span></span><br><span class="line"><span class="keyword">this</span>.Transform.Translate(speed * Time.deltaTime, Space.Self); <span class="comment">//直接将向量参数输入</span></span><br></pre></td></tr></table></figure></div>
<h3 id="2-12-预制体使用"><a href="#2-12-预制体使用" class="headerlink" title="2.12.预制体使用"></a>2.12.预制体使用</h3><ul>
<li>预制体的生成与使用</li>
<li>预制体的三种编辑方式<br>1.单独编辑：双击预制体<br>2.原位编辑：选择实例Instance，Inspector里面选择open<br>3.覆盖修改：选中Instance，编辑后选中Overri|Apply，应用编辑；Override|Revert，取消编辑</li>
<li>脚本创建预制体实例  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Object.Instantiate(prefab, parent); <span class="comment">//prebfab是预制体，parent是可以设置预制体的生成父节点。返回值为一个GameObject</span></span><br></pre></td></tr></table></figure></div></li>
<li>创建实例后的初始化<div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Instance.transform.position = (x, y, z); <span class="comment">//可以使用空节点作为定位，获取空节点位置</span></span><br><span class="line">Instance.transform.eulerAngles = (x, y, z); <span class="comment">//实例的角度</span></span><br></pre></td></tr></table></figure></div></li>
<li>实例的销毁  <div class="highlight-container" data-rel="C#"><figure class="iseeu highlight c#"><table><tr><td class="code"><pre><span class="line">Object.Destroy(Instance, delay); <span class="comment">//delay秒后销毁实例对象。Destroy会在Update之后执行</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="3-物理与特效"><a href="#3-物理与特效" class="headerlink" title="3.物理与特效"></a>3.物理与特效</h2><h3 id="3-1-物理系统"><a href="#3-1-物理系统" class="headerlink" title="3.1.物理系统"></a>3.1.物理系统</h3><ul>
<li>添加刚体组件Rigidbody，添加后，由物理引擎接管物体运动</li>
</ul>
<h3 id="3-2-刚体碰撞"><a href="#3-2-刚体碰撞" class="headerlink" title="3.2.刚体碰撞"></a>3.2.刚体碰撞</h3><ul>
<li>碰撞体Colider，描述了物体的碰撞范围<br>Box Collider：长方碰撞体<br>SphereCollider：球形碰撞体</li>
</ul>
<h3 id="3-3-反弹与摩擦"><a href="#3-3-反弹与摩擦" class="headerlink" title="3.3.反弹与摩擦"></a>3.3.反弹与摩擦</h3><ul>
<li>创建Physic Material</li>
<li>参数：</li>
</ul>
<p>Dynamic Friction：动摩擦系数<br>Static Friction：静摩擦系数<br>Bounciness：反弹系数</p>
<h3 id="3-4-碰撞检测"><a href="#3-4-碰撞检测" class="headerlink" title="3.4.碰撞检测"></a>3.4.碰撞检测</h3><ul>
<li>碰撞<br>条件：两个物体都有碰撞体+至少有个物体有刚体。<br>注意：<br>（1）Unity中碰撞体独立于物体大小，与物体的MeshFilter大小无关。<br>（2）只有碰撞体才能被射线检测到，否则无法被检测。<br>（3）只有刚体才会有受力效果。<br>（4）isKinematic就有点像把刚体关了，但没完全关，因为保留了物理特性如质量，速度等等。</li>
<li>触发<br>条件：产生碰撞的条件(两个物体都有碰撞体+至少有个物体有刚体)+两个物体至少有个有触发器<br>注意：<br>（1）碰撞检测和触发检测不能同时触发，如果是触发检测方法调用就不可能会有碰撞检测方法调用。</li>
</ul>
<h2 id="附：unity以及rider快捷键"><a href="#附：unity以及rider快捷键" class="headerlink" title="附：unity以及rider快捷键"></a>附：unity以及rider快捷键</h2><h3 id="rider："><a href="#rider：" class="headerlink" title="rider："></a>rider：</h3><p>快速注释：ctrl+K，ctrl+C<br>选中当前灭光标所在单词：ctrl+W<br>多光标：shift+alt+鼠标&#x2F;上下键</p>
<h3 id="unity："><a href="#unity：" class="headerlink" title="unity："></a>unity：</h3><p>可以使视角跟随物体运动：-&gt;Edit-&gt;Lock View to Seleted</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Particle System</title>
    <url>/Blog/2024/02/08/Unity%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88/</url>
    <content><![CDATA[<h1 id="Unity-Particle-System"><a href="#Unity-Particle-System" class="headerlink" title="Unity Particle System"></a>Unity Particle System</h1><h3 id="1-1-粒子系统"><a href="#1-1-粒子系统" class="headerlink" title="1.1.粒子系统"></a>1.1.粒子系统</h3><ul>
<li>添加一个ParticleSystem</li>
<li>预览与运行</li>
<li>模块与参数<br>1个主模块（基础参数）和22个子模块（扩展参数）<br>默认启用3个子模块：</li>
</ul>
<ol>
<li>Emission，发射的频率</li>
<li>Shape，粒子发生器的形状</li>
<li>Render，粒子的显示</li>
</ol>
<h3 id="1-2-粒子本质"><a href="#1-2-粒子本质" class="headerlink" title="1.2.粒子本质"></a>1.2.粒子本质</h3><ul>
<li>粒子是一个个小纸片，而粒子系统就是一个不短创建并且发射出去的粒子发生器</li>
<li>可以使用Render中的render mode进行修改渲染模式：<br>Billbord：广告牌，自动旋转，始终面向相机</li>
</ul>
<h3 id="1-3-贴图"><a href="#1-3-贴图" class="headerlink" title="1.3.贴图"></a>1.3.贴图</h3><ul>
<li>对于贴图material，使用着色器：<br>Shader：Praticles|Standered Unit<br>Render Mode:Additive<br>Color Mode:Multiply<br>Albedo:指定贴图</li>
</ul>
<h3 id="1-4-周期和时长"><a href="#1-4-周期和时长" class="headerlink" title="1.4.周期和时长"></a>1.4.周期和时长</h3><ul>
<li>Duration：周期，粒子系统的工作时长</li>
<li>Looping：循环，粒子系统工作一次&#x2F;循环工作</li>
<li>Prewarm：预热，粒子系统是否先预热一个周期</li>
<li>Strat Lifetime：粒子的生命时长，默认五秒</li>
</ul>
<h3 id="1-5-模拟空间"><a href="#1-5-模拟空间" class="headerlink" title="1.5.模拟空间"></a>1.5.模拟空间</h3><ul>
<li>Simulation Space模块<br>Local，本地空间，粒子会以粒子发生器为中心<br>World，世界空间，粒子使用世界坐标系</li>
</ul>
<h3 id="1-6-发射"><a href="#1-6-发射" class="headerlink" title="1.6.发射"></a>1.6.发射</h3><h4 id="1-6-1-发射方式"><a href="#1-6-1-发射方式" class="headerlink" title="1.6.1.发射方式"></a>1.6.1.发射方式</h4><ul>
<li>Emission：匀速发射<br>Rate over Time:按时间发射（一般用于静止）<br>Rate over Distance：按距离发射（一般用于运动物体）<br>Max Particles：最大存在粒子数</li>
<li>Brusts：爆发式发射<br>Time：爆炸发生时间<br>Count：爆出多少个粒子<br>Cycles&#x2F;Interval：爆炸次数&#x2F;间隔<br>Probability：爆炸的可能概率，0表示不会爆炸</li>
</ul>
<h4 id="1-6-2-发射器形状"><a href="#1-6-2-发射器形状" class="headerlink" title="1.6.2.发射器形状"></a>1.6.2.发射器形状</h4><ul>
<li>Shape模块<br>Cone：锥形<br>Sphere：球形<br>Hemisphere：半球形<br>Box：盒形<br>Circle：圆形<br>Rectangle：长方形</li>
</ul>
<h3 id="1-7-渐变"><a href="#1-7-渐变" class="headerlink" title="1.7.渐变"></a>1.7.渐变</h3><h4 id="1-7-1-颜色渐变"><a href="#1-7-1-颜色渐变" class="headerlink" title="1.7.1.颜色渐变"></a>1.7.1.颜色渐变</h4><ul>
<li>Color over Lifetime模块<br>上面是透明度，下面是颜色，可以在上面设置多个透明度，以达到淡入淡出的效果<br>颜色的最终值 &#x3D; 初始颜色 * Color over Time设置的颜色（RGB分别相乘）</li>
</ul>
<h4 id="1-7-2-大小渐变"><a href="#1-7-2-大小渐变" class="headerlink" title="1.7.2.大小渐变"></a>1.7.2.大小渐变</h4><ul>
<li>Size over Lifetime模块<br>曲线变化：横坐标lifetime，纵坐标size</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/Blog/2024/02/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy  </span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
</search>
